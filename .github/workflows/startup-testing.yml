name: Startup Testing CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC to catch performance regressions
    - cron: '0 6 * * *'

jobs:
  startup-tests:
    name: Startup Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run startup validation tests
      run: npm run test:startup-validation
      env:
        CI: true
        
    - name: Run CLI startup tests
      run: npm run test:cli-startup
      env:
        CI: true
        
    - name: Run startup error scenario tests
      run: npm run test:startup-errors
      env:
        CI: true
        
    - name: Run startup performance tests
      run: npm run test:startup-performance
      env:
        CI: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: startup-test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          
    - name: Check for performance regressions
      run: |
        if [ -f "test-results/startup-metrics-latest.json" ]; then
          node -e "
            const metrics = require('./test-results/startup-metrics-latest.json');
            if (metrics.regressionAlerts && metrics.regressionAlerts.length > 0) {
              console.error('Performance regression detected:');
              metrics.regressionAlerts.forEach(alert => {
                console.error('- ' + alert.type + ': ' + alert.operation);
              });
              process.exit(1);
            }
          "
        fi
      shell: bash
      
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: startup-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmark
      run: |
        echo "Running startup performance benchmark..."
        npm run test:startup-performance -- --verbose
        
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: ./all-test-results
        
    - name: Generate performance trend report
      run: |
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Collect performance data from all platforms
          const results = {};
          const dirs = fs.readdirSync('./all-test-results');
          
          dirs.forEach(dir => {
            const metricsPath = path.join('./all-test-results', dir, 'test-results', 'startup-metrics-latest.json');
            if (fs.existsSync(metricsPath)) {
              const data = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));
              results[dir] = data.performanceMetrics;
            }
          });
          
          console.log('Performance Summary Across Platforms:');
          Object.entries(results).forEach(([platform, metrics]) => {
            console.log(platform + ':');
            Object.entries(metrics).forEach(([op, data]) => {
              console.log('  ' + op + ': ' + data.average.toFixed(2) + 'ms avg');
            });
          });
        "
        
    - name: Comment performance results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-results/startup-performance-report.md')) {
            const report = fs.readFileSync('test-results/startup-performance-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Startup Performance Report\n\n' + report
            });
          }
          
  regression-detection:
    name: Regression Detection
    runs-on: ubuntu-latest
    needs: startup-tests
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: startup-test-results-ubuntu-latest-18
        path: ./test-results
        
    - name: Check for critical regressions
      run: |
        if [ -f "test-results/startup-metrics-latest.json" ]; then
          # Check if any critical startup commands exceed thresholds
          node -e "
            const metrics = require('./test-results/startup-metrics-latest.json');
            const critical = {
              '--version': 2000,
              '--help': 2000,
              'doctor': 5000
            };
            
            let failed = false;
            Object.entries(metrics.performanceMetrics || {}).forEach(([op, data]) => {
              if (critical[op] && data.average > critical[op]) {
                console.error('CRITICAL: ' + op + ' took ' + data.average.toFixed(2) + 'ms (limit: ' + critical[op] + 'ms)');
                failed = true;
              }
            });
            
            if (failed) {
              console.error('Critical performance regression detected!');
              process.exit(1);
            } else {
              console.log('All critical operations within performance limits.');
            }
          "
        fi
        
    - name: Create issue for critical regressions
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Critical Startup Performance Regression Detected',
            body: [
              'A critical startup performance regression has been detected in commit ' + context.sha,
              '',
              '**Details:**',
              '- Build: ' + context.runId,
              '- Branch: ' + context.ref,
              '- Triggered by: ' + context.eventName,
              '',
              'Please investigate the performance regression and fix it as soon as possible.',
              '',
              'Check the build logs and performance reports for detailed information.'
            ].join('\n'),
            labels: ['bug', 'performance', 'critical']
          });
