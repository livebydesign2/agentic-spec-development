#!/bin/bash
#
# Pre-commit hook for specification integrity validation (MAINT-003 TASK-004)
# 
# This hook prevents commits that would introduce:
# - Duplicate specification IDs
# - Invalid inter-specification references
# - Structural integrity violations
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SPECS_DIR="docs/specs"
VALIDATION_SCRIPT="scripts/validate-spec-integrity.js"
TEMP_REPORT="/tmp/asd-validation-report.json"

echo -e "${BLUE}🔍 ASD Pre-commit Validation${NC}"
echo -e "${BLUE}Checking specification integrity...${NC}"

# Check if we have any spec files in the commit
spec_files_changed=$(git diff --cached --name-only | grep "^${SPECS_DIR}/.*\.md$" | wc -l)

if [ "$spec_files_changed" -eq 0 ]; then
    echo -e "${GREEN}✅ No specification files modified, skipping validation${NC}"
    exit 0
fi

echo -e "${YELLOW}📝 Found ${spec_files_changed} specification file(s) in commit${NC}"

# Run the validation script
echo -e "${BLUE}Running specification integrity validation...${NC}"

if node "${VALIDATION_SCRIPT}" . --json "${TEMP_REPORT}"; then
    echo -e "${GREEN}✅ All specifications passed integrity validation${NC}"
    rm -f "${TEMP_REPORT}"
    exit 0
else
    validation_exit_code=$?
    echo -e "${RED}❌ Specification validation failed${NC}"
    
    # Show validation results if report exists
    if [ -f "${TEMP_REPORT}" ]; then
        echo -e "${YELLOW}📊 Validation Report Summary:${NC}"
        
        # Extract and display key metrics from JSON report
        if command -v jq >/dev/null 2>&1; then
            errors=$(jq -r '.summary.errors' "${TEMP_REPORT}" 2>/dev/null || echo "unknown")
            warnings=$(jq -r '.summary.warnings' "${TEMP_REPORT}" 2>/dev/null || echo "unknown")
            duplicates=$(jq -r '.issues.duplicateIds | length' "${TEMP_REPORT}" 2>/dev/null || echo "unknown")
            broken_refs=$(jq -r '.issues.brokenReferences | length' "${TEMP_REPORT}" 2>/dev/null || echo "unknown")
            
            echo -e "  Errors: ${RED}${errors}${NC}"
            echo -e "  Warnings: ${YELLOW}${warnings}${NC}"
            echo -e "  Duplicate IDs: ${RED}${duplicates}${NC}"
            echo -e "  Broken References: ${RED}${broken_refs}${NC}"
        else
            echo -e "${YELLOW}  (Install 'jq' for detailed report summary)${NC}"
        fi
        
        echo -e "\n${BLUE}📄 Full report saved to: ${TEMP_REPORT}${NC}"
        echo -e "${BLUE}Review the report for detailed information about issues found.${NC}"
    fi
    
    echo -e "\n${RED}🚫 COMMIT REJECTED${NC}"
    echo -e "${YELLOW}Please fix the specification integrity issues before committing.${NC}"
    echo -e "\nTo fix issues:"
    echo -e "  1. Review the validation report above"
    echo -e "  2. Fix duplicate IDs and broken references"
    echo -e "  3. Run validation manually: node ${VALIDATION_SCRIPT}"
    echo -e "  4. Commit your changes again"
    
    echo -e "\nTo bypass validation (NOT RECOMMENDED):"
    echo -e "  git commit --no-verify"
    
    exit $validation_exit_code
fi